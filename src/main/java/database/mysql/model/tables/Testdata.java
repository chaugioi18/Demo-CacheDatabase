/*
 * This file is generated by jOOQ.
*/
package database.mysql.model.tables;


import database.mysql.model.Keys;
import database.mysql.model.Test;
import database.mysql.model.tables.records.TestdataRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.9.1"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Testdata extends TableImpl<TestdataRecord> {

    private static final long serialVersionUID = 622505463;

    /**
     * The reference instance of <code>test.testData</code>
     */
    public static final Testdata TESTDATA = new Testdata();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<TestdataRecord> getRecordType() {
        return TestdataRecord.class;
    }

    /**
     * The column <code>test.testData.id</code>.
     */
    public final TableField<TestdataRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>test.testData.name</code>.
     */
    public final TableField<TestdataRecord, String> NAME = createField("name", org.jooq.impl.SQLDataType.VARCHAR.length(255), this, "");

    /**
     * The column <code>test.testData.time</code>.
     */
    public final TableField<TestdataRecord, Long> TIME = createField("time", org.jooq.impl.SQLDataType.BIGINT, this, "");

    /**
     * Create a <code>test.testData</code> table reference
     */
    public Testdata() {
        this("testData", null);
    }

    /**
     * Create an aliased <code>test.testData</code> table reference
     */
    public Testdata(String alias) {
        this(alias, TESTDATA);
    }

    private Testdata(String alias, Table<TestdataRecord> aliased) {
        this(alias, aliased, null);
    }

    private Testdata(String alias, Table<TestdataRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, "");
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Test.TEST;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<TestdataRecord, Integer> getIdentity() {
        return Keys.IDENTITY_TESTDATA;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<TestdataRecord> getPrimaryKey() {
        return Keys.KEY_TESTDATA_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<TestdataRecord>> getKeys() {
        return Arrays.<UniqueKey<TestdataRecord>>asList(Keys.KEY_TESTDATA_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Testdata as(String alias) {
        return new Testdata(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Testdata rename(String name) {
        return new Testdata(name, null);
    }
}
